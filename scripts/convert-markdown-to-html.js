/**
 * Convert markdown documentation to HTML pages for JSDoc
 */
const fs = require('fs');
const path = require('path');
const { marked } = require('marked');

const docsDir = path.join(__dirname, '..', 'docs');

// HTML template matching JSDoc better-docs structure
const htmlTemplate = (title, content, cssPrefix = '') => `<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>VectorIcons Service Layer Documentation ${title}</title>

  <script src="https://cdn.jsdelivr.net/gh/google/code-prettify@master/loader/run_prettify.js"></script>
  <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
  <script src="${cssPrefix}build/entry.js"></script>
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
  <link href="https://fonts.googleapis.com/css?family=Roboto:100,400,700|Inconsolata,700" rel="stylesheet">
  <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.6.3/css/all.css" integrity="sha384-UHRtZLI+pbxtHCWp1t77Bi1L4ZtiqrqD80Kn4Z8NTSRyMA2Fd33n5dQ8lWUE00s/" crossorigin="anonymous">
  <link type="text/css" rel="stylesheet" href="https://jmblog.github.io/color-themes-for-google-code-prettify/themes/tomorrow-night.min.css">
  <link type="text/css" rel="stylesheet" href="${cssPrefix}styles/app.min.css">
  <link type="text/css" rel="stylesheet" href="${cssPrefix}styles/iframe.css">
  <script async defer src="https://buttons.github.io/buttons.js"></script>

  <style>
    /* Additional styling for markdown content */
    .content h2 {
      margin-top: 2em;
      padding-top: 1em;
      border-top: 1px solid #e0e0e0;
    }
    .content h3 { margin-top: 1.5em; }
    .content pre {
      overflow-x: auto;
    }
    .content table {
      border-collapse: collapse;
      width: 100%;
      margin: 1em 0;
    }
    .content table th,
    .content table td {
      border: 1px solid #ddd;
      padding: 8px 12px;
      text-align: left;
    }
    .content table th {
      background-color: #f4f4f4;
      font-weight: bold;
    }
    .content table tr:nth-child(even) {
      background-color: #f9f9f9;
    }
    .content blockquote {
      border-left: 4px solid #0066cc;
      margin: 1em 0;
      padding-left: 1em;
      color: #666;
    }
    .content ul, .content ol {
      line-height: 1.6;
    }
    .content li {
      margin: 0.5em 0;
    }
    /* Mermaid diagram styling */
    .mermaid {
      background: white;
      padding: 1em;
      border: 1px solid #e0e0e0;
      border-radius: 4px;
      margin: 1em 0;
    }
  </style>
  <script type="module">
    import mermaid from 'https://cdn.jsdelivr.net/npm/mermaid@10/dist/mermaid.esm.min.mjs';
    mermaid.initialize({ startOnLoad: true, theme: 'default' });
  </script>
</head>

<body class="layout small-header">
    <div id="stickyNavbarOverlay"></div>

<div class="top-nav">
    <div class="inner">
        <a id="hamburger" role="button" class="navbar-burger" aria-label="menu" aria-expanded="false">
            <span aria-hidden="true"></span>
            <span aria-hidden="true"></span>
            <span aria-hidden="true"></span>
        </a>
        <div class="logo">
            <a href="${cssPrefix}index.html">
                <h1 class="navbar-item">VectorIcons Service Layer</h1>
            </a>
        </div>
        <div class="menu">
            <div class="navigation">
                <a href="${cssPrefix}index.html" class="link">Documentation</a>
            </div>
        </div>
    </div>
</div>
    <div id="main">
        <div class="sidebar" id="sidebarNav">
            <nav>
<h2><a href="${cssPrefix}index.html">Documentation</a></h2>
<!-- Navigation will be injected by organize-docs-nav.js -->
</nav>
        </div>
        <div class="core" id="main-content-wrapper">
            <div class="content">
                ${content}
            </div>

            <footer class="footer">
                <div class="content has-text-centered">
                    <p>Documentation generated by <a href="https://github.com/jsdoc3/jsdoc">JSDoc 4.0.5</a></p>
                    <p class="sidebar-created-by">
                        <a href="https://github.com/SoftwareBrothers/better-docs" target="_blank">BetterDocs theme</a> provided with <i class="fas fa-heart"></i> by
                        <a href="http://softwarebrothers.co" target="_blank">SoftwareBrothers - JavaScript Development Agency</a>
                    </p>
                </div>
            </footer>

        </div>
        <div id="side-nav" class="side-nav">
        </div>
    </div>
<script src="${cssPrefix}scripts/app.min.js"></script>
<script>PR.prettyPrint();</script>
<script src="${cssPrefix}scripts/linenumber.js"> </script>

</body>
</html>`;

// Configure marked to handle mermaid code blocks
const renderer = new marked.Renderer();
const originalCode = renderer.code.bind(renderer);
renderer.code = function(code, language) {
  if (language === 'mermaid') {
    return `<pre class="mermaid">\n${code}\n</pre>\n`;
  }
  return originalCode(code, language);
};

marked.setOptions({ renderer });

function convertMarkdownFile(mdPath, htmlPath, title, cssPrefix = '') {
  const markdown = fs.readFileSync(mdPath, 'utf8');
  const html = marked(markdown);
  const fullHtml = htmlTemplate(title, html, cssPrefix);
  fs.writeFileSync(htmlPath, fullHtml, 'utf8');
  console.log(`✅ Converted ${path.basename(mdPath)} → ${path.basename(htmlPath)}`);
}

// Convert ECOSYSTEM.md
convertMarkdownFile(
  path.join(docsDir, 'ECOSYSTEM.md'),
  path.join(docsDir, 'ECOSYSTEM.html'),
  'System Architecture'
);

// Convert ADRs
const decisionsDir = path.join(docsDir, 'decisions');
const adrFiles = [
  { file: 'ADR-001-service-oriented-architecture.md', title: 'ADR-001: Service-Oriented Architecture' },
  { file: 'ADR-002-mixin-pattern.md', title: 'ADR-002: Mixin Pattern' },
  { file: 'ADR-003-event-driven-architecture.md', title: 'ADR-003: Event-Driven Architecture' },
  { file: 'ADR-004-contract-based-testing.md', title: 'ADR-004: Contract-Based Testing' },
  { file: 'ADR-005-entity-immutability.md', title: 'ADR-005: Entity Immutability' }
];

adrFiles.forEach(({ file, title }) => {
  convertMarkdownFile(
    path.join(decisionsDir, file),
    path.join(decisionsDir, file.replace('.md', '.html')),
    title,
    '../'  // CSS files are one level up from decisions/
  );
});

console.log('✅ All markdown files converted to HTML!');
