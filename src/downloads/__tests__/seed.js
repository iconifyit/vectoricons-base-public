const crypto = require('crypto');

let testCounter = 0;

/**
 * Generate test data for a single download
 * @param {Object} opts - Must include entity_id (the actual ID of the set/icon/etc being downloaded)
 * @returns {Promise<Object>} Plain object with snake_case keys
 */
const seedOne = async (opts = {}) => {
    testCounter++;

    // Generate truly unique entity_unique_id using random bytes
    const randomId = crypto.randomBytes(6).toString('hex').substring(0, 10);

    // entity_id must be provided or use a fake high number for non-real tests
    const entityId = opts.entity_id !== undefined ? opts.entity_id : (90000000 + testCounter);

    return {
        user_id: opts.user_id || 1,
        entity_id: entityId,
        entity_type: opts.entity_type || 'set',
        entity_unique_id: opts.entity_unique_id || `e${randomId}`.substring(0, 12),
        // unique_id is auto-generated by database, don't provide it unless explicitly passed
        ...(opts.unique_id && { unique_id: opts.unique_id }),
        object_key: opts.object_key || `test/user1/set_${testCounter}.zip`,
    };
};

module.exports = {
    seedOne,
};
